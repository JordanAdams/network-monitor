import { MetadataBearer as $MetadataBearer, SmithyException as __SmithyException } from "@aws-sdk/types";

export interface AccessDeniedException extends __SmithyException, $MetadataBearer {
    name: "AccessDeniedException";
    $fault: "client";
    Message: string | undefined;
}

export interface ConflictException extends __SmithyException, $MetadataBearer {
    name: "ConflictException";
    $fault: "client";
    Message: string | undefined;
}

export interface Tag {
    
    Key: string | undefined;
    
    Value: string | undefined;
}
export declare namespace Tag {
    
    const filterSensitiveLog: (obj: Tag) => any;
}
export interface CreateDatabaseRequest {
    
    DatabaseName: string | undefined;
    
    KmsKeyId?: string;
    
    Tags?: Tag[];
}
export declare namespace CreateDatabaseRequest {
    
    const filterSensitiveLog: (obj: CreateDatabaseRequest) => any;
}

export interface Database {
    
    Arn?: string;
    
    DatabaseName?: string;
    
    TableCount?: number;
    
    KmsKeyId?: string;
    
    CreationTime?: Date;
    
    LastUpdatedTime?: Date;
}
export declare namespace Database {
    
    const filterSensitiveLog: (obj: Database) => any;
}
export interface CreateDatabaseResponse {
    
    Database?: Database;
}
export declare namespace CreateDatabaseResponse {
    
    const filterSensitiveLog: (obj: CreateDatabaseResponse) => any;
}

export interface InternalServerException extends __SmithyException, $MetadataBearer {
    name: "InternalServerException";
    $fault: "server";
    Message: string | undefined;
}

export interface InvalidEndpointException extends __SmithyException, $MetadataBearer {
    name: "InvalidEndpointException";
    $fault: "client";
    Message?: string;
}

export interface ServiceQuotaExceededException extends __SmithyException, $MetadataBearer {
    name: "ServiceQuotaExceededException";
    $fault: "client";
    Message?: string;
}

export interface ThrottlingException extends __SmithyException, $MetadataBearer {
    name: "ThrottlingException";
    $fault: "client";
    Message: string | undefined;
}

export interface ValidationException extends __SmithyException, $MetadataBearer {
    name: "ValidationException";
    $fault: "client";
    Message: string | undefined;
}
export declare enum S3EncryptionOption {
    SSE_KMS = "SSE_KMS",
    SSE_S3 = "SSE_S3"
}

export interface S3Configuration {
    
    BucketName?: string;
    
    ObjectKeyPrefix?: string;
    
    EncryptionOption?: S3EncryptionOption | string;
    
    KmsKeyId?: string;
}
export declare namespace S3Configuration {
    
    const filterSensitiveLog: (obj: S3Configuration) => any;
}

export interface MagneticStoreRejectedDataLocation {
    
    S3Configuration?: S3Configuration;
}
export declare namespace MagneticStoreRejectedDataLocation {
    
    const filterSensitiveLog: (obj: MagneticStoreRejectedDataLocation) => any;
}

export interface MagneticStoreWriteProperties {
    
    EnableMagneticStoreWrites: boolean | undefined;
    
    MagneticStoreRejectedDataLocation?: MagneticStoreRejectedDataLocation;
}
export declare namespace MagneticStoreWriteProperties {
    
    const filterSensitiveLog: (obj: MagneticStoreWriteProperties) => any;
}

export interface RetentionProperties {
    
    MemoryStoreRetentionPeriodInHours: number | undefined;
    
    MagneticStoreRetentionPeriodInDays: number | undefined;
}
export declare namespace RetentionProperties {
    
    const filterSensitiveLog: (obj: RetentionProperties) => any;
}
export interface CreateTableRequest {
    
    DatabaseName: string | undefined;
    
    TableName: string | undefined;
    
    RetentionProperties?: RetentionProperties;
    
    Tags?: Tag[];
    
    MagneticStoreWriteProperties?: MagneticStoreWriteProperties;
}
export declare namespace CreateTableRequest {
    
    const filterSensitiveLog: (obj: CreateTableRequest) => any;
}
export declare enum TableStatus {
    ACTIVE = "ACTIVE",
    DELETING = "DELETING"
}

export interface Table {
    
    Arn?: string;
    
    TableName?: string;
    
    DatabaseName?: string;
    
    TableStatus?: TableStatus | string;
    
    RetentionProperties?: RetentionProperties;
    
    CreationTime?: Date;
    
    LastUpdatedTime?: Date;
    
    MagneticStoreWriteProperties?: MagneticStoreWriteProperties;
}
export declare namespace Table {
    
    const filterSensitiveLog: (obj: Table) => any;
}
export interface CreateTableResponse {
    
    Table?: Table;
}
export declare namespace CreateTableResponse {
    
    const filterSensitiveLog: (obj: CreateTableResponse) => any;
}

export interface ResourceNotFoundException extends __SmithyException, $MetadataBearer {
    name: "ResourceNotFoundException";
    $fault: "client";
    Message?: string;
}
export interface DeleteDatabaseRequest {
    
    DatabaseName: string | undefined;
}
export declare namespace DeleteDatabaseRequest {
    
    const filterSensitiveLog: (obj: DeleteDatabaseRequest) => any;
}
export interface DeleteTableRequest {
    
    DatabaseName: string | undefined;
    
    TableName: string | undefined;
}
export declare namespace DeleteTableRequest {
    
    const filterSensitiveLog: (obj: DeleteTableRequest) => any;
}
export interface DescribeDatabaseRequest {
    
    DatabaseName: string | undefined;
}
export declare namespace DescribeDatabaseRequest {
    
    const filterSensitiveLog: (obj: DescribeDatabaseRequest) => any;
}
export interface DescribeDatabaseResponse {
    
    Database?: Database;
}
export declare namespace DescribeDatabaseResponse {
    
    const filterSensitiveLog: (obj: DescribeDatabaseResponse) => any;
}
export interface DescribeEndpointsRequest {
}
export declare namespace DescribeEndpointsRequest {
    
    const filterSensitiveLog: (obj: DescribeEndpointsRequest) => any;
}

export interface Endpoint {
    
    Address: string | undefined;
    
    CachePeriodInMinutes: number | undefined;
}
export declare namespace Endpoint {
    
    const filterSensitiveLog: (obj: Endpoint) => any;
}
export interface DescribeEndpointsResponse {
    
    Endpoints: Endpoint[] | undefined;
}
export declare namespace DescribeEndpointsResponse {
    
    const filterSensitiveLog: (obj: DescribeEndpointsResponse) => any;
}
export interface DescribeTableRequest {
    
    DatabaseName: string | undefined;
    
    TableName: string | undefined;
}
export declare namespace DescribeTableRequest {
    
    const filterSensitiveLog: (obj: DescribeTableRequest) => any;
}
export interface DescribeTableResponse {
    
    Table?: Table;
}
export declare namespace DescribeTableResponse {
    
    const filterSensitiveLog: (obj: DescribeTableResponse) => any;
}
export declare enum DimensionValueType {
    VARCHAR = "VARCHAR"
}

export interface Dimension {
    
    Name: string | undefined;
    
    Value: string | undefined;
    
    DimensionValueType?: DimensionValueType | string;
}
export declare namespace Dimension {
    
    const filterSensitiveLog: (obj: Dimension) => any;
}
export interface ListDatabasesRequest {
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListDatabasesRequest {
    
    const filterSensitiveLog: (obj: ListDatabasesRequest) => any;
}
export interface ListDatabasesResponse {
    
    Databases?: Database[];
    
    NextToken?: string;
}
export declare namespace ListDatabasesResponse {
    
    const filterSensitiveLog: (obj: ListDatabasesResponse) => any;
}
export interface ListTablesRequest {
    
    DatabaseName?: string;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListTablesRequest {
    
    const filterSensitiveLog: (obj: ListTablesRequest) => any;
}
export interface ListTablesResponse {
    
    Tables?: Table[];
    
    NextToken?: string;
}
export declare namespace ListTablesResponse {
    
    const filterSensitiveLog: (obj: ListTablesResponse) => any;
}
export interface ListTagsForResourceRequest {
    
    ResourceARN: string | undefined;
}
export declare namespace ListTagsForResourceRequest {
    
    const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
}
export interface ListTagsForResourceResponse {
    
    Tags?: Tag[];
}
export declare namespace ListTagsForResourceResponse {
    
    const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
}
export declare enum MeasureValueType {
    BIGINT = "BIGINT",
    BOOLEAN = "BOOLEAN",
    DOUBLE = "DOUBLE",
    MULTI = "MULTI",
    TIMESTAMP = "TIMESTAMP",
    VARCHAR = "VARCHAR"
}

export interface MeasureValue {
    
    Name: string | undefined;
    
    Value: string | undefined;
    
    Type: MeasureValueType | string | undefined;
}
export declare namespace MeasureValue {
    
    const filterSensitiveLog: (obj: MeasureValue) => any;
}
export declare enum TimeUnit {
    MICROSECONDS = "MICROSECONDS",
    MILLISECONDS = "MILLISECONDS",
    NANOSECONDS = "NANOSECONDS",
    SECONDS = "SECONDS"
}

export interface _Record {
    
    Dimensions?: Dimension[];
    
    MeasureName?: string;
    
    MeasureValue?: string;
    
    MeasureValueType?: MeasureValueType | string;
    
    Time?: string;
    
    TimeUnit?: TimeUnit | string;
    
    Version?: number;
    
    MeasureValues?: MeasureValue[];
}
export declare namespace _Record {
    
    const filterSensitiveLog: (obj: _Record) => any;
}

export interface RecordsIngested {
    
    Total?: number;
    
    MemoryStore?: number;
    
    MagneticStore?: number;
}
export declare namespace RecordsIngested {
    
    const filterSensitiveLog: (obj: RecordsIngested) => any;
}

export interface RejectedRecord {
    
    RecordIndex?: number;
    
    Reason?: string;
    
    ExistingVersion?: number;
}
export declare namespace RejectedRecord {
    
    const filterSensitiveLog: (obj: RejectedRecord) => any;
}

export interface RejectedRecordsException extends __SmithyException, $MetadataBearer {
    name: "RejectedRecordsException";
    $fault: "client";
    Message?: string;
    RejectedRecords?: RejectedRecord[];
}
export interface TagResourceRequest {
    
    ResourceARN: string | undefined;
    
    Tags: Tag[] | undefined;
}
export declare namespace TagResourceRequest {
    
    const filterSensitiveLog: (obj: TagResourceRequest) => any;
}
export interface TagResourceResponse {
}
export declare namespace TagResourceResponse {
    
    const filterSensitiveLog: (obj: TagResourceResponse) => any;
}
export interface UntagResourceRequest {
    
    ResourceARN: string | undefined;
    
    TagKeys: string[] | undefined;
}
export declare namespace UntagResourceRequest {
    
    const filterSensitiveLog: (obj: UntagResourceRequest) => any;
}
export interface UntagResourceResponse {
}
export declare namespace UntagResourceResponse {
    
    const filterSensitiveLog: (obj: UntagResourceResponse) => any;
}
export interface UpdateDatabaseRequest {
    
    DatabaseName: string | undefined;
    
    KmsKeyId: string | undefined;
}
export declare namespace UpdateDatabaseRequest {
    
    const filterSensitiveLog: (obj: UpdateDatabaseRequest) => any;
}
export interface UpdateDatabaseResponse {
    
    Database?: Database;
}
export declare namespace UpdateDatabaseResponse {
    
    const filterSensitiveLog: (obj: UpdateDatabaseResponse) => any;
}
export interface UpdateTableRequest {
    
    DatabaseName: string | undefined;
    
    TableName: string | undefined;
    
    RetentionProperties?: RetentionProperties;
    
    MagneticStoreWriteProperties?: MagneticStoreWriteProperties;
}
export declare namespace UpdateTableRequest {
    
    const filterSensitiveLog: (obj: UpdateTableRequest) => any;
}
export interface UpdateTableResponse {
    
    Table?: Table;
}
export declare namespace UpdateTableResponse {
    
    const filterSensitiveLog: (obj: UpdateTableResponse) => any;
}
export interface WriteRecordsRequest {
    
    DatabaseName: string | undefined;
    
    TableName: string | undefined;
    
    CommonAttributes?: _Record;
    
    Records: _Record[] | undefined;
}
export declare namespace WriteRecordsRequest {
    
    const filterSensitiveLog: (obj: WriteRecordsRequest) => any;
}
export interface WriteRecordsResponse {
    
    RecordsIngested?: RecordsIngested;
}
export declare namespace WriteRecordsResponse {
    
    const filterSensitiveLog: (obj: WriteRecordsResponse) => any;
}
